<?xml version="1.0"?>
<project name="Simpa" default="compile" basedir=".">

  <!-- To get this going, emma.jar must be in the ant classpath. One
  way to have this is to put it into ${user.home}/.ant/lib -->
  <taskdef resource="emma_ant.properties" />

  <target name="compile" description="compiles java classes">
    <mkdir dir="Classes"/>
    <javac srcdir="src"
      destdir="Classes"
      source="1.7"
      fork="false"
      debug="true"
      deprecation="true"
      >
      <compilerarg value="-Xlint:unchecked"/>
      <patternset 
	includes="absimpa/**/*.java nodes/**/*.java example/**/*.java"
	excludes="**/package-info.java, tryout/**/*.java"/>
    </javac>
  </target>

  <target name="javadoc" depends="svnrevision"
    description="run javadoc to create api docs">
    <property name="apidocdir" value="dist/AbsimpaDoc"/>
    <javadoc sourcepath="src"
      packagenames="absimpa, example, absimpa.lexer"
      destdir="${apidocdir}"
      windowtitle="Abstract Simple Parser API"
      header="&lt;span class='approheader'&gt;Absimpa v${svn.revision}&lt;/span&gt;"
      overview="src/overview.html"

      Bottom="&lt;div class=&quot;approlink&quot;>download: &lt;a
      href='http://pifpafpuf.de/Absimpa/download' target='_top'>pifpafpuf.de&lt;/a>&lt;br/>home page: &lt;a href=&quot;http://pifpafpuf.de/Absimpa/&quot; target='_top'>pifpafpuf.de/Absimpa&lt;/a>&lt;/div>"
      public="true"
      linksource="true"
      >
    </javadoc>
  </target> 
  
  <target name="jar" depends="cleanClasses, compile, svnrevision">
    <mkdir dir="dist"/>
    <property name="distjar" value="dist/Absimpa-${svn.revision}.jar"/>
    <jar destfile="${distjar}" basedir="Classes"
      includes="**/*.class"
      excludes="**/Test*.class">
      <manifest>
	<attribute name="svn-revision" value="${svn.revision}" />
	<attribute name="timestamp" value="${time.now}" />
      </manifest>
    </jar>
  </target>

  <target name="docjar" depends="cleanDoc, javadoc">
    <mkdir dir="dist"/>
    <zip destfile="dist/SimpaDoc-${svn.revision}.zip"
      basedir="dist" includes="SimpaDoc/**">
    </zip>
  </target>

  <target name="cleanClasses">
    <delete dir="Classes/" />
    <mkdir dir="Classes"/>
  </target>
  <target name="cleanDoc">
    <delete dir="dist/SimpaDoc"/>
  </target>

  <target name="compiletests">
    <javac srcdir="test"
      destdir="Classes"
      source="1.5"
      listfiles="no"
      fork="false"
      debug="true"
      deprecation="true"
      >
      <compilerarg value="-Xlint:unchecked"/>
      <patternset includes="**/*.java" />
    </javac>
  </target>

  <!-- prefer command line usage to be able to run my own tester -->
  <target name="unitest" depends="compile, compiletests, emmainstr"
    description="runit unit tests with our own test runner">
    <java classname="absimpa.VerboseTester" fork="yes">
      <jvmarg value="-Demma.coverage.out.file=dist/coverage/emmadata.ec"/>
      <jvmarg value="-noverify"/>
      <classpath>
	<pathelement location="dist/coverage/Classes"/>
	<pathelement location="/usr/share/java/junit4.jar"/>
	<pathelement location="${user.home}/.ant/lib/emma.jar"/>
	<pathelement location="Classes"/>
      </classpath>
      <arg value="absimpa.TestParsers"/>
      <arg value="absimpa.TestExprLanguage"/>
      <arg value="absimpa.TestPicky"/>
      <arg value="absimpa.TestBNF"/>
    </java>
  </target>

  <target name="emmainstr">
    <delete dir="dist/coverage/Classes"/>
    <emma verbosity="quiet">
      <instr instrpath="Classes"
	destdir="dist/coverage/Classes"
	metadatafile="dist/coverage/emmadata.em"
	merge="false">
	<!-- filter excludes="*.Test*"/ -->
      </instr>
    </emma>
  </target>

  <target name="coverage" depends="unitest"
    description="run unit test collecting coverage data and produce a report">
    <emma verbosity="quiet">
      <report sourcepath="src:test" 
	columns="name,line,block,method"
	sort="+line,+block,+method"
	metrics="line:95"
	>
	<fileset dir="dist/coverage">
	  <!-- find emmadata.ec. and emmadata.em -->
	  <include name="emmadata.*" />
	</fileset>
	
	<html outfile="dist/covereport/coverage.html" />
      </report>
    </emma>
  </target>

  <!-- Get subversion revision and whether the working dir is dirty
  with regard to the repository. (Since subversion tasks are still not
  standard with ant, use exec -->
  <target name="svnrevision">
    <mkdir dir="dist"/>
    <exec executable="svn" output="dist/svnstatus">
      <arg value="status"/> <arg value="-u"/>
    </exec>
    <!-- set svn.clean to "." if svnstatus has only one line -->
    <loadfile property="svn.clean" srcFile="dist/svnstatus">
      <filterchain>
	<replaceregex pattern=".*" replace="."/>
	<striplinebreaks/>
      </filterchain>
    </loadfile>

    <loadfile property="svn.revid" srcFile="dist/svnstatus">
      <filterchain>
	<tailfilter lines="1"/>
	<replaceregex pattern=".[^0-9]*" replace=""/>
	<striplinebreaks/>
      </filterchain>
    </loadfile>
    <condition property="svn.revision" value="${svn.revid}" else="dirty">
      <equals arg1="${svn.clean}" arg2="." />
    </condition>
  </target>

  <tstamp>
    <format property="time.now" pattern="yyyy-MM-dd hh:mm:ss"/>
  </tstamp>

  <target name="e">
    <echoproperties/>
  </target>
</project>
